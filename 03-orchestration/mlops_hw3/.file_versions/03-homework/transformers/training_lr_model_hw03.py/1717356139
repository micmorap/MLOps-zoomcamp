import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction import DictVectorizer
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error


def vectorizer_training_set(df: pd.DataFrame):
    
    X = df[['PULocationID', 'DOLocationID']].astype(str)
    data_dict = X.to_dict(orient='records')

    dv = DictVectorizer(sparse=True)
    
    X_train = dv.fit_transform(data_dict)
    y_train = df['duration'].values

    return (X_train, y_train)

def train_model(X_train, y_train):

    model = LinearRegression()
    model_trained = model.fit(X_train, y_train)
    return model_trained 


def results_model(model_trained, X_train, y_train):
    
    model_trained.predict(X_train)
    print(f"The intercepto of LR model is: {model_trained.intercept_}")



@transformer
def transform(data, *args, **kwargs):
    """
    Template code for a transformer block.

    Add more parameters to this function if this block has multiple parent blocks.
    There should be one parameter for each output variable from each parent block.

    Args:
        data: The output from the upstream parent block
        args: The output from any additional upstream blocks (if applicable)

    Returns:
        Anything (e.g. data frame, dictionary, array, int, str, etc.)
    """
    # Specify your transformation logic here

    return data


